// Generated by CoffeeScript 1.6.3
/*
 * New coffeescript file
*/


(function() {
  var attr, center, clegend, colorscale, geoJson, legend, map, pathes, pieGen, popup, summerSegments, summerStyle, winterSegments, winterStyle;

  attr = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, Imagery © <a href="http://mapbox.com">MapBox</a>';

  console.log(city);

  center = {
    lat: (+city.top + +city.bottom) / 2,
    lng: (+city.left + +city.right) / 2
  };

  console.log(center);

  console.log(stats);

  map = L.map('map').setView(center, 12);

//  layer = 'https://a.tiles.mapbox.com/v3/sztanko.gjp73mna/{z}/{x}/{y}.png';
  layer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
  L.tileLayer(layer, {
    attribution: attr,
    maxZoom: 18
  }).addTo(map);

  colorscale = d3.scale.linear().domain([0, 3]).range(["orange", "#0000AA"]).interpolate(d3.interpolateHcl);

  legend = L.control({
    position: 'bottomleft'
  });

  legend.onAdd = function(map) {
    this._div = L.DomUtil.get("legendContent");
    return this._div;
  };

  legend.addTo(map);

  clegend = L.control({
    position: 'topright'
  });

  clegend.onAdd = function(map) {
    this._div = L.DomUtil.get("legendColours");
    return this._div;
  };

  clegend.addTo(map);

  geoJson = {};

  winterStyle = function(f) {
    return {
      "color": "red",
      weight: 4
    };
  };

  summerStyle = function(f) {
    return {
      "color": "orange",
      weight: 4
    };
  };

  pieGen = function(s, radius) {
    var c1, c2, deg2xy, maxN, pHist, path, r, summerSunPath, ticks, winterSunPath;
    deg2xy = function(deg, r) {
      var rad, xy;
      rad = deg / 180 * Math.PI;
      xy = [Math.round(r * Math.sin(rad)), -Math.round(r * Math.cos(rad))];
      return xy;
    };
    pHist = s.hist;
    maxN = _.max(pHist);
    r = radius / maxN;
    c1 = _.map(pHist, function(d, i) {
      var p, xy, xy1;
      xy = deg2xy(i, r * d);
      xy1 = deg2xy(i + 1, r * d);
      return p = "L" + xy[0] + " " + xy[1] + "L" + xy1[0] + " " + xy1[1];
    });
    c2 = _.map(pHist, function(d, i) {
      var p, xy, xy1;
      xy = deg2xy(i, -r * d);
      xy1 = deg2xy(i + 1, -r * d);
      return p = "L" + xy[0] + " " + xy[1] + "L" + xy1[0] + " " + xy1[1];
    });
    path = "M0 0 " + c1.join(" ") + c2.join(" ") + " L0 0";
    winterSunPath = "M" + deg2xy(s.sun_azimuth, -radius) + " L" + deg2xy(s.sun_azimuth, radius);
    summerSunPath = "M" + deg2xy(s.summer_sun_azimuth, -radius) + " L" + deg2xy(s.summer_sun_azimuth, radius);
    ticks = _.chain(_.range(0, 360, 5)).map(function(i) {
      return "M" + deg2xy(i, 0) + "L" + deg2xy(i, 200);
    }).value().join(" ");
    return [path, winterSunPath, summerSunPath, ticks];
  };

  pathes = pieGen(stats, 180);

  $("#pie").attr("d", pathes[0]);

  $("#winterSun").attr("d", pathes[1]);

  $("#summerSun").attr("d", pathes[2]);

  $("#ticks").attr("d", pathes[3]);

  popup = function(feature, layer) {
    if (feature.properties.name !== null) {
      return layer.bindPopup(feature.properties.name + "<br>\n " + feature.properties.azimuth_d + "° difference from the sun path");
    } else {
      return layer.bindPopup(feature.properties.azimuth_d + "° difference from the sun path");
    }
  };

  summerSegments = L.geoJson(summer, {
    style: summerStyle,
    onEachFeature: popup
  }).addTo(map);

  winterSegments = L.geoJson(winter, {
    style: winterStyle,
    onEachFeature: popup
  }).addTo(map);

}).call(this);
